{"version":3,"sources":["components/Square.js","components/Board.js","utils/calculateWinner.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","className","Board","props","renderSquare","i","squares","calculateWinner","lines","length","a","b","c","Game","useState","Array","fill","history","setSquares","xIsNext","setNext","stepNumber","setStepNumber","handleClick","_history","slice","newSquares","concat","setMove","useEffect","setTimeout","availableSquares","from","keys","filter","index","selectedIndex","Math","floor","random","computerMove","status","current","winner","moves","map","step","move","desc","key","jumpTo","style","maxWidth","margin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dea549e5.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Square({ value, onClick }) {\n    return (\n        <button\n            className=\"square\"\n            onClick={() => onClick()}>\n            {value}\n        </button>\n    )\n}","import React from \"react\";\nimport Square from \"./Square\";\n\nexport default function Board(props) {\n\n    const renderSquare = (i) => {\n        return <Square value={props.squares[i]} onClick={() => props.onClick(i)} />\n    }\n\n    return (\n        <div>\n            <div className=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n    )\n}","export default function calculateWinner(squares) {\n    const lines = [\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i]\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}","import React, { useState, useEffect } from \"react\";\nimport Board from \"./Board\";\nimport calculateWinner from \"../utils/calculateWinner\";\n\nexport default function Game() {\n    const [history, setSquares] = useState(\n        [{\n            squares: Array(9).fill(null)\n        }]\n    );\n    const [xIsNext, setNext] = useState(true);\n    const [stepNumber, setStepNumber] = useState(0);\n\n    const jumpTo = (step) => {\n        setStepNumber(step);\n    }\n\n    const setMove = (i) => {\n        const _history = history.slice(0, stepNumber + 1);\n        const current = _history[_history.length - 1];\n        const newSquares = current.squares.slice();\n        if (calculateWinner(newSquares) || newSquares[i]) {\n            return;\n        }\n\n        newSquares[i] = 'X';\n        setSquares(_history.concat([{ squares: newSquares }]));\n        setStepNumber(_history.length)\n        setNext(!xIsNext);\n\n    }\n\n    const computerMove = () => {\n\n        const _history = history.slice(0, stepNumber + 1);\n        const current = _history[_history.length - 1];\n        const newSquares = current.squares.slice();\n\n        // select a random index in a array that is not null\n        const squareIndexes = Array.from(Array(newSquares.length).keys());\n       // This part guarantees that every time the array of keys shrinks, we only get the indexes left that are not null\n       // so when the Math.random does is thing, it will only select from those available squares.\n        const availableSquares = squareIndexes.filter(index => newSquares[index] === null);\n        const selectedIndex = availableSquares[Math.floor(Math.random() * availableSquares.length)]\n        if (calculateWinner(newSquares) || newSquares[selectedIndex]) {\n            return;\n        }\n        newSquares[selectedIndex] = 'O';\n        setSquares(_history.concat([{ squares: newSquares }]));\n        setStepNumber(_history.length)\n        setNext(true);\n    }\n\n    const handleClick = (i) => {\n        setMove(i);\n    }\n\n    useEffect(() => {\n        if (!xIsNext) { // once xIsNext is no longer true, computerMove() gets called as a side effect in half a second.\n            setTimeout(() => {\n                computerMove()\n                setNext(true);\n            }, 500)\n        }\n    }, [xIsNext])\n\n\n    const _history = history;\n    const current = _history[stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = _history.map((step, move) => {\n        const desc = move ? `Go to move # ${move}` : `Go to game start`;\n        return <li key={move}>\n            <button onClick={() => jumpTo(move)}>{desc}</button>\n        </li>\n    })\n\n    let status;\n    if (winner) {\n        status = `Winner: ${winner}`;\n    }\n    else {\n        status = `Next Player: ${xIsNext ? 'X' : 'O'}`;\n    }\n\n    return (\n        <div style={{ maxWidth: '960px', margin: '0 auto'}}>\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}